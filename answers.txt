W1D1 - Variables and Types

//: ## Challenge 1

greeting = "Aloha"


//: ## Challenge 2

count = count + 1


//: ## Challenge 3

// The types of count (Int) and greeting (String) don't match up, so there is a syntax error and the playground won't run.

//: ## Challenge 4

// tipAmount's type is: Double
// isOpen's type is: Bool

//: ## Bonus Challenge

greeting.lowercaseString
greeting.uppercaseString



W1S2 - Control Flow

//: ## Challenge 1

if bicycleCount == 1 {
    print("There is \(bicycleCount) bicycle")
} else {
    print("There are \(bicycleCount) bicycles")
}

//: ## Challenge 2


if bicycleCount == 1 {
    print("There is \(bicycleCount) bicycle")
} else if (bicycleCount == 0) {
    print("There are zero bicycles")
} else {
    print("There are \(bicycleCount) bicycles")
}


//: ## Bonus Challenge

var inputString = "Do you like bicycles?"

if inputString.hasSuffix("?") {
    print("I think so!")
} else {
    print("You don't say!")
}



W2D1 - Functions


//: ## Challenge 1

greet("Cory")
greet("Danny")


//: ## Challenge 2


func pluralize(bicycleCount: Int) {
    if bicycleCount == 1 {
        print("There is \(bicycleCount) bicycle")
    } else if (bicycleCount == 0) {
        print("There are zero bicycles")
    } else {
        print("There are \(bicycleCount) bicycles")
    }
}


//: ## Challenge 3


func pluralizedString(bicycleCount: Int) -> String {
    if bicycleCount == 1 {
        return "There is \(bicycleCount) bicycle"
    } else if (bicycleCount == 0) {
        return "There are zero bicycles"
    } else {
        return "There are \(bicycleCount) bicycles"
    }
}



//: ## Bonus Challenge


func pluralizedWord(singular: String, pluralNoun: String, count: Int) -> String {
    if count == 1 {
        return "There is \(count) \(singular)"
    } else if (count == 0) {
        return "There are zero \(pluralNoun)"
    } else {
        return "There are \(count) \(pluralNoun)"
    }
}




//: # W2D2 - Classes
//:
//: ## Challenge 1

class Bicycle {
    var numberOfGears: Int = 10
    var currentGear: Int = 1
    
    func gearUp() {
        currentGear = min(currentGear + 1, numberOfGears)
        // increase the current gear by one, up to the maximum.
        // we use min here because you can never have currentGear over numberOfGears
    }
    
    func gearDown() {
        currentGear = max(currentGear - 1, 1)
        // decrease the current gear by one, up to the minimum
        // we use max here because you can never have currentGear under 1
    }
}



